from dataclasses import dataclass, field
from utils import V2, Direction, Grid
from collections import defaultdict, deque
import math
import copy


@dataclass
class MazeSolver:
    maze: Grid
    start: V2 = field(init=False)
    end: V2 = field(init=False)
    start_dists: dict[V2, int] = field(init=False)
    end_dists: dict[V2, int] = field(init=False)

    def __post_init__(self):
        self.start = self.maze.find("S")[0]
        self.end = self.maze.find("E")[0]
        self.maze.update(self.start, ".")
        self.maze.update(self.end, ".")
        self.start_dists = self._build_dists(self.start)
        self.end_dists = self._build_dists(self.end)

    def _build_dists(self, start: V2):
        queue = deque([(start, 0)])
        visited = set([start])
        dists = dict()
        while len(queue) > 0:
            p, dist = queue.popleft()
            dists[p] = dist
            for direction in Direction.ALL:
                next_p = p + direction
                if (
                    next_p not in visited
                    and self.maze.is_inbounds(next_p)
                    and self.maze.at(next_p) == "."
                ):
                    visited.add(next_p)
                    queue.append((next_p, dist + 1))

        return dists

    def find_dist(self, cheat_p: V2, cheat_direction: Direction):
        maze = self.maze
        assert maze.is_inbounds(cheat_p)
        assert maze.is_inbounds(cheat_p + cheat_direction)
        assert maze.is_inbounds(cheat_p - cheat_direction)
        assert maze.at(cheat_p) == "#"
        assert maze.at(cheat_p + cheat_direction) == "."
        assert maze.at(cheat_p - cheat_direction) == "."

        return (
            self.start_dists[cheat_p - cheat_direction]
            + self.end_dists[cheat_p + cheat_direction]
            + 2
        )

    def find_dist_v2(self, cheat_start: V2, cheat_dist: int):
        maze = self.maze
        assert maze.is_inbounds(cheat_start)
        assert maze.at(cheat_start) == "."
        # cheat dists can be allocated vertically or horizonally
        min_dist = 999999999
        for x_dist in range(0, cheat_dist + 1):
            y_dist = cheat_dist - x_dist
            for dx in [-x_dist, x_dist]:
                for dy in [-y_dist, y_dist]:
                    cheat_end = cheat_start + V2(dx, dy)
                    if maze.is_inbounds(cheat_end) and maze.at(cheat_end) == ".":
                        min_dist = min(
                            min_dist,
                            self.start_dists[cheat_start]
                            + self.end_dists[cheat_end]
                            + cheat_dist,
                        )
        return min_dist

    def dist_saved_v2(self, cheat_start: V2, cheat_dist: int) -> int:
        dist = self.find_dist_v2(cheat_start, cheat_dist)
        return self.start_dists[self.end] - dist

    def cheat_dists(self, cheat_start: V2, max_cheat_dist: int) -> dict:
        maze = self.maze
        dists = defaultdict(int)
        assert maze.is_inbounds(cheat_start)
        assert maze.at(cheat_start) == "."
        cheat_used = set()
        # cheat dists can be allocated vertically or horizonally
        for cheat_dist in range(max_cheat_dist):
            for x_dist in range(0, cheat_dist + 1):
                y_dist = cheat_dist - x_dist
                for dx in [-x_dist, x_dist]:
                    for dy in [-y_dist, y_dist]:
                        cheat_end = cheat_start + V2(dx, dy)
                        if maze.is_inbounds(cheat_end) and maze.at(cheat_end) == ".":
                            dist = (
                                self.start_dists[cheat_start]
                                + self.end_dists[cheat_end]
                                + cheat_dist
                            )
                            if (cheat_start, cheat_end, dist) not in cheat_used:
                                dists[dist] += 1
                                cheat_used.add((cheat_start, cheat_end, dist))
        return dists


def test_all_cheat_dists():
    maze = Grid(
        [
            "###############",
            "#...#...#.....#",
            "#.#.#.#.#.###.#",
            "#S#...#.#.#...#",
            "#######.#.#.###",
            "#######.#.#...#",
            "#######.#.###.#",
            "###..E#...#...#",
            "###.#######.###",
            "#...###...#...#",
            "#.#####.#.###.#",
            "#.#...#.#.#...#",
            "#.#.#.#.#.#.###",
            "#...#...#...###",
            "###############",
        ]
    )
    cheat_dists = defaultdict(int)
    solver = MazeSolver(copy.deepcopy(maze))
    for x in range(maze.height):
        for y in range(maze.width):
            cheat_start = V2(x, y)
            if maze.at(cheat_start) == ".":
                dists = solver.cheat_dists(cheat_start, 20)
                for dist, count in dists.items():
                    cheat_dists[dist] += count

    for cheat, count in cheat_dists.items():
        if cheat <= 84 - 50:
            print(f"there are {count} cheats taht save {84-cheat}")


def test_find_dist_with_cheat_1():
    maze = Grid(
        [
            "###############",
            "#...#...#.....#",
            "#.#.#.#.#.###.#",
            "#S#...#.#.#...#",
            "#######.#.#.###",
            "#######.#.#...#",
            "#######.#.###.#",
            "###..E#...#...#",
            "###.#######.###",
            "#...###...#...#",
            "#.#####.#.###.#",
            "#.#...#.#.#...#",
            "#.#.#.#.#.#.###",
            "#...#...#...###",
            "###############",
        ]
    )
    solver = MazeSolver(maze)
    assert solver.find_dist(V2(1, 8), Direction.RIGHT) == 72


def part1(maze):
    solver = MazeSolver(copy.deepcopy(maze))
    baseline_dist = solver.start_dists[solver.end]
    count = 0
    for i in range(maze.height):
        for j in range(maze.width):
            cheat_p = V2(i, j)
            for cheat_direction in Direction.ALL:
                if (
                    maze.is_inbounds(cheat_p)
                    and maze.is_inbounds(cheat_p + cheat_direction)
                    and maze.is_inbounds(cheat_p - cheat_direction)
                    and maze.at(cheat_p) == "#"
                    and maze.at(cheat_p + cheat_direction) == "."
                    and maze.at(cheat_p - cheat_direction) == "."
                ):
                    if (
                        baseline_dist - solver.find_dist(cheat_p, cheat_direction)
                        >= 100
                    ):
                        count += 1
    print(count)


maze = Grid(
    [
        "#############################################################################################################################################",
        "#.........#...#...###...###...#.............###...#...#...#.....#...#...#...###...#.....#.....#.....###.....#...#...#...#...#...........#...#",
        "#.#######.#.#.#.#.###.#.###.#.#.###########.###.#.#.#.#.#.#.###.#.#.#.#.#.#.###.#.#.###.#.###.#.###.###.###.#.#.#.#.#.#.#.#.#.#########.#.#.#",
        "#...#...#...#.#.#.#...#...#.#.#.........#...#...#.#.#.#.#...#...#.#.#.#...#...#.#...#...#...#.#.#...#...#...#.#.#.#.#.#...#...#.......#...#.#",
        "###.#.#.#####.#.#.#.#####.#.#.#########.#.###.###.#.#.#.#####.###.#.#.#######.#.#####.#####.#.#.#.###.###.###.#.#.#.#.#########.#####.#####.#",
        "###...#.....#.#.#.#.....#.#.#.#...###...#...#.#...#.#.#.....#.#...#.#.....#...#.....#.......#.#.#...#...#.....#...#.#.....#.....#...#.....#.#",
        "###########.#.#.#.#####.#.#.#.#.#.###.#####.#.#.###.#.#####.#.#.###.#####.#.#######.#########.#.###.###.###########.#####.#.#####.#.#####.#.#",
        "#...#...#...#.#.#.#...#.#.#.#.#.#...#.#.....#.#.###.#.#...#.#.#.#...###...#...#...#.........#.#.#...#...#...#.......#...#.#.......#...###...#",
        "#.#.#.#.#.###.#.#.#.#.#.#.#.#.#.###.#.#.#####.#.###.#.#.#.#.#.#.#.#####.#####.#.#.#########.#.#.#.###.###.#.#.#######.#.#.###########.#######",
        "#.#...#.#...#.#.#.#.#...#.#.#.#...#.#.#.###...#.#...#.#.#...#...#.#...#...#...#.#.#.......#.#...#...#.#...#...###.....#...#...#.....#.......#",
        "#.#####.###.#.#.#.#.#####.#.#.###.#.#.#.###.###.#.###.#.#########.#.#.###.#.###.#.#.#####.#.#######.#.#.#########.#########.#.#.###.#######.#",
        "#.#...#.....#.#.#.#.....#.#.#.#...#.#.#...#...#.#...#.#.........#.#.#...#.#.#...#.#...#...#.......#...#.........#.....#.....#...###.#...#...#",
        "#.#.#.#######.#.#.#####.#.#.#.#.###.#.###.###.#.###.#.#########.#.#.###.#.#.#.###.###.#.#########.#############.#####.#.###########.#.#.#.###",
        "#...#.......#...#.#.....#.#.#.#...#.#.#...#...#...#.#.###...#...#...#...#.#.#...#.#...#.#.........#.......#...#.#.....#.#.....#...#...#...###",
        "###########.#####.#.#####.#.#.###.#.#.#.###.#####.#.#.###.#.#.#######.###.#.###.#.#.###.#.#########.#####.#.#.#.#.#####.#.###.#.#.###########",
        "###...#...#.....#.#...#...#.#...#.#...#...#...#...#.#...#.#.#...#.....#...#.#...#.#.#...#.#.......#.#...#...#...#.#...#.#.#...#.#.....###...#",
        "###.#.#.#.#####.#.###.#.###.###.#.#######.###.#.###.###.#.#.###.#.#####.###.#.###.#.#.###.#.#####.#.#.#.#########.#.#.#.#.#.###.#####.###.#.#",
        "#...#...#.......#.....#...#...#.#...#...#...#.#...#...#.#.#...#.#.....#...#.#.#...#.#.###...#.....#...#...###...#...#.#...#.....#...#.....#.#",
        "#.#######################.###.#.###.#.#.###.#.###.###.#.#.###.#.#####.###.#.#.#.###.#.#######.###########.###.#.#####.###########.#.#######.#",
        "#.#.............#.......#.#...#...#...#.#...#.#...###.#.#...#.#.#.....###.#...#...#.#...#...#.....#.....#...#.#.###...#...........#.#.......#",
        "#.#.###########.#.#####.#.#.#####.#####.#.###.#.#####.#.###.#.#.#.#######.#######.#.###.#.#.#####.#.###.###.#.#.###.###.###########.#.#######",
        "#...#...........#.#...#.#...#...#.#...#.#.....#.......#.#...#...#...###...#.....#.#...#.#.#...#...#.###.....#.#.#...#...#.........#...#.....#",
        "#####.###########.#.#.#.#####.#.#.#.#.#.###############.#.#########.###.###.###.#.###.#.#.###.#.###.#########.#.#.###.###.#######.#####.###.#",
        "#...#...........#.#.#...#...#.#.#...#...#.........#.....#...#...#...#...#...###.#.#...#...#...#...#.#...#.....#.#...#...#.#.......#...#.#...#",
        "#.#.###########.#.#.#####.#.#.#.#########.#######.#.#######.#.#.#.###.###.#####.#.#.#######.#####.#.#.#.#.#####.###.###.#.#.#######.#.#.#.###",
        "#.#...........#...#.......#...#.#...#...#.......#.#.....###...#.#.#...#...#...#...#.....#...#...#.#...#.#.#...#...#...#...#.........#...#.###",
        "#.###########.#################.#.#.#.#.#######.#.#####.#######.#.#.###.###.#.#########.#.###.#.#.#####.#.#.#.###.###.###################.###",
        "#...........#.#...#...#...#...#...#...#.#.......#.......#...#...#...#...#...#...###...#.#.###.#...#.....#...#.#...#...#...#...#.....#...#...#",
        "###########.#.#.#.#.#.#.#.#.#.#########.#.###############.#.#.#######.###.#####.###.#.#.#.###.#####.#########.#.###.###.#.#.#.#.###.#.#.###.#",
        "#...........#...#...#...#...#...........#.....#...###...#.#.#...#.....###.#.....#...#...#...#.....#...#...###.#.###.#...#...#...###...#...#.#",
        "#.###########################################.#.#.###.#.#.#.###.#.#######.#.#####.#########.#####.###.#.#.###.#.###.#.###################.#.#",
        "#.........#.......#...#.................#.....#.#.#...#.#.#.#...#.....#...#...#...#.........#...#.#...#.#.#...#.....#.........#...#.....#...#",
        "#########.#.#####.#.#.#.###############.#.#####.#.#.###.#.#.#.#######.#.#####.#.###.#########.#.#.#.###.#.#.#################.#.#.#.###.#####",
        "#.........#...###...#.#.#.....#...#...#.#.#...#.#.#...#.#.#.#...#.....#...#...#...#.#...#...#.#.#.#.###.#.#.#.....#...........#.#.#...#.....#",
        "#.###########.#######.#.#.###.#.#.#.#.#.#.#.#.#.#.###.#.#.#.###.#.#######.#.#####.#.#.#.#.#.#.#.#.#.###.#.#.#.###.#.###########.#.###.#####.#",
        "#.............#...###...#...#...#...#...#.#.#...#.#...#.#.#.#...#.#.....#.#.#...#.#.#.#...#.#.#.#.#.#...#...#...#.#.............#.....#...#.#",
        "###############.#.#########.#############.#.#####.#.###.#.#.#.###.#.###.#.#.#.#.#.#.#.#####.#.#.#.#.#.#########.#.#####################.#.#.#",
        "#...............#.....#...#.....#.....###.#...###.#...#.#.#...###.#...#.#.#.#.#.#.#...#.....#.#.#.#...#.........#.....#...#...#...#.....#...#",
        "#.###################.#.#.#####.#.###.###.###.###.###.#.#.#######.###.#.#.#.#.#.#.#####.#####.#.#.#####.#############.#.#.#.#.#.#.#.#########",
        "#...#...#...#.......#...#...###...#...#...#...#...#...#...#.......#...#.#.#.#.#.#...#...#...#.#.#.#...#.............#.#.#.#.#...#.#.#...#...#",
        "###.#.#.#.#.#.#####.#######.#######.###.###.###.###.#######.#######.###.#.#.#.#.###.#.###.#.#.#.#.#.#.#############.#.#.#.#.#####.#.#.#.#.#.#",
        "###...#...#...#.....#.....#.........#...#...###...#.....###...#...#...#.#.#...#.#...#...#.#.#.#...#.#...#.......#...#...#.#.....#...#.#...#.#",
        "###############.#####.###.###########.###.#######.#####.#####.#.#.###.#.#.#####.#.#####.#.#.#.#####.###.#.#####.#.#######.#####.#####.#####.#",
        "#...............#...#.###...........#.....#.....#.#.....#.....#.#.#...#.#.....#.#...#...#.#.#.....#...#...#...#...#.....#.....#.#.....#.....#",
        "#.###############.#.#.#############.#######.###.#.#.#####.#####.#.#.###.#####.#.###.#.###.#.#####.###.#####.#.#####.###.#####.#.#.#####.#####",
        "#.........#.....#.#.#.#.............#.......#...#.#.....#.....#.#.#.###...#...#...#.#.#...#.#...#.#...#...#.#.......#...#...#...#.#.....#...#",
        "#########.#.###.#.#.#.#.#############.#######.###.#####.#####.#.#.#.#####.#.#####.#.#.#.###.#.#.#.#.###.#.#.#########.###.#.#####.#.#####.#.#",
        "#.......#...###...#...#...............#...#...###.#...#...#...#.#.#.....#.#.....#.#.#.#.###.#.#...#.....#...#...#.....#...#.......#.......#.#",
        "#.#####.###############################.#.#.#####.#.#.###.#.###.#.#####.#.#####.#.#.#.#.###.#.###############.#.#.#####.###################.#",
        "#.....#.#...#...#...#...#.......#.......#.#.....#...#.#...#.....#.#...#.#.#...#.#.#.#...#...#.#...............#.#.......#...#.....#.......#.#",
        "#####.#.#.#.#.#.#.#.#.#.#.#####.#.#######.#####.#####.#.#########.#.#.#.#.#.#.#.#.#.#####.###.#.###############.#########.#.#.###.#.#####.#.#",
        "#.....#...#.#.#.#.#.#.#.#.....#.#.......#.......#...#.#.........#.#.#...#.#.#.#.#...#...#...#.#...#...#.......#.....#.....#.#.#...#.....#...#",
        "#.#########.#.#.#.#.#.#.#####.#.#######.#########.#.#.#########.#.#.#####.#.#.#.#####.#.###.#.###.#.#.#.#####.#####.#.#####.#.#.#######.#####",
        "#.........#.#.#...#...#.......#.........#...#...#.#.#.#.....#...#...#...#...#.#...#...#.....#...#...#...#...#...###.#...###...#.#.....#...###",
        "#########.#.#.###########################.#.#.#.#.#.#.#.###.#.#######.#.#####.###.#.###########.#########.#.###.###.###.#######.#.###.###.###",
        "#.........#...#...#...#...#...............#...#...#.#...###.#.........#...#...#...#.............#...#.....#...#...#...#.....#...#...#...#...#",
        "#.#############.#.#.#.#.#.#.#######################.#######.#############.#.###.#################.#.#.#######.###.###.#####.#.#####.###.###.#",
        "#...#...#.....#.#.#.#...#...#.......................###...#.........#.....#...#.#.........#.....#.#...#...###.....###.......#.#...#...#.#...#",
        "###.#.#.#.###.#.#.#.#########.#########################.#.#########.#.#######.#.#.#######.#.###.#.#####.#.###################.#.#.###.#.#.###",
        "###...#...###...#...#...#...#...............###.........#.........#.#.......#.#.#...#...#.#...#.#.#.....#...................#.#.#...#.#.#...#",
        "#####################.#.#.#.###############.###.#################.#.#######.#.#.###.#.#.#.###.#.#.#.#######################.#.#.###.#.#.###.#",
        "#.........#.......#...#...#...............#.#...#.......#...#.....#.........#.#.#...#.#.#...#.#.#...#...#...#...#.....#.....#...###...#...#.#",
        "#.#######.#.#####.#.#####################.#.#.###.#####.#.#.#.###############.#.#.###.#.###.#.#.#####.#.#.#.#.#.#.###.#.#################.#.#",
        "#.......#.#.....#.#.....................#...#.#...#...#...#.#.........#.....#.#.#...#.#...#...#.###...#...#...#...###.#.......#...#...#...#.#",
        "#######.#.#####.#.#####################.#####.#.###.#.#####.#########.#.###.#.#.###.#.###.#####.###.#################.#######.#.#.#.#.#.###.#",
        "#.......#.....#.#.......................#...#.#.#...#...###.......#...#...#.#.#.###...###.#...#.....#.......#...#...#.........#.#.#.#.#...#.#",
        "#.###########.#.#########################.#.#.#.#.#####.#########.#.#####.#.#.#.#########.#.#.#######.#####.#.#.#.#.###########.#.#.#.###.#.#",
        "#...........#.#.#...#...#.....#...........#...#...#...#...#.....#...#...#.#.#...#...#...#...#.......#.#.....#.#...#.#.....#...#.#...#...#.#.#",
        "###########.#.#.#.#.#.#.#.###.#.###################.#.###.#.###.#####.#.#.#.#####.#.#.#.###########.#.#.#####.#####.#.###.#.#.#.#######.#.#.#",
        "#...###...#.#.#...#...#.#.###...#.......#...#.......#.....#.#...#...#.#.#.#...#...#...#...#.......#...#.......#...#.#.#...#.#.#.#.......#...#",
        "#.#.###.#.#.#.#########.#.#######.#####.#.#.#.#############.#.###.#.#.#.#.###.#.#########.#.#####.#############.#.#.#.#.###.#.#.#.###########",
        "#.#.....#...#...###...#...#.....#...###.#.#.#...............#...#.#.#.#.#.#...#.......#...#.....#.............#.#...#.#.#...#...#...#...#...#",
        "#.#############.###.#.#####.###.###.###.#.#.###################.#.#.#.#.#.#.#########.#.#######.#############.#.#####.#.#.#########.#.#.#.#.#",
        "#...........#...#...#.....#...#.###...#...#.#.....#...#...#.....#.#...#...#.....#.....#.........#.....#...###...###...#...#.......#.#.#.#.#.#",
        "###########.#.###.#######.###.#.#####.#####.#.###.#.#.#.#.#.#####.#############.#.###############.###.#.#.#########.#######.#####.#.#.#.#.#.#",
        "###...#...#.#...#.......#.#...#.#.....#...#...###...#...#.#.#...#.#...#...#.....#.................###...#.....#...#.....#...#...#...#.#...#.#",
        "###.#.#.#.#.###.#######.#.#.###.#.#####.#.###############.#.#.#.#.#.#.#.#.#.#################################.#.#.#####.#.###.#.#####.#####.#",
        "#...#...#.#...#...#...#.#.#...#.#.......#.............#...#.#.#...#.#...#...###...#.............###...###.....#.#.###...#...#.#.......#...#.#",
        "#.#######.###.###.#.#.#.#.###.#.#####################.#.###.#.#####.###########.#.#.###########.###.#.###.#####.#.###.#####.#.#########.#.#.#",
        "#.......#.###...#...#...#.....#.#...........#.........#.....#...#...#...#.....#.#.#.......#...#.....#.....#.....#...#.....#.#.#.........#...#",
        "#######.#.#####.###############.#.#########.#.#################.#.###.#.#.###.#.#.#######.#.#.#############.#######.#####.#.#.#.#############",
        "#.......#.#...#.#...#.........#.#.........#.#.........#...#.....#.#...#.#...#.#.#...#.....#.#.#...#...#.....#.......#...#.#...#...........###",
        "#.#######.#.#.#.#.#.#.#######.#.#########.#.#########.#.#.#.#####.#.###.###.#.#.###.#.#####.#.#.#.#.#.#.#####.#######.#.#.###############.###",
        "#.......#...#.#...#.#.#.......#...#.......#.....#.....#.#.#.....#.#.#...###.#.#...#.#.....#.#.#.#...#...#.....#.......#...#.....#.......#...#",
        "#######.#####.#####.#.#.#########.#.###########.#.#####.#.#####.#.#.#.#####.#.###.#.#####.#.#.#.#########.#####.###########.###.#.#####.###.#",
        "###...#.#...#...###...#.........#...#...###...#...#.....#.#...#.#...#.#.....#.....#...###...#...#.........#...#...#.........#...#.....#...#.#",
        "###.#.#.#.#.###.###############.#####.#.###.#.#####.#####.#.#.#.#####.#.#############.###########.#########.#.###.#.#########.#######.###.#.#",
        "#...#.#...#...#.....#.....#.....#.....#...#.#...###...#...#.#.#.#.....#.......#.......#.....#..E#...#.......#.....#.......###.........###.#.#",
        "#.###.#######.#####.#.###.#.#####.#######.#.###.#####.#.###.#.#.#.###########.#.#######.###.#.#####.#.###################.###############.#.#",
        "#...#.#.....#...#...#...#...#.....#.......#.#...#...#.#.#...#.#.#.#...###.....#.#...#...#...#.###...#.#.....#...#...#...#...#.....###...#.#.#",
        "###.#.#.###.###.#.#####.#####.#####.#######.#.###.#.#.#.#.###.#.#.#.#.###.#####.#.#.#.###.###.###.###.#.###.#.#.#.#.#.#.###.#.###.###.#.#.#.#",
        "###.#.#...#.....#.....#.....#.....#.#.......#...#.#.#.#.#...#.#.#.#.#...#.....#.#.#.#...#.#...###...#.#...#.#.#.#.#.#.#...#.#.#...#...#.#...#",
        "###.#.###.###########.#####.#####.#.#.#########.#.#.#.#.###.#.#.#.#.###.#####.#.#.#.###.#.#.#######.#.###.#.#.#.#.#.#.###.#.#.#.###.###.#####",
        "#...#...#...........#.#.....#.....#...#...#...#.#.#...#.#...#...#.#.#...#.....#.#.#...#.#.#.#######...###.#...#.#.#.#.###.#...#...#...#.#...#",
        "#.#####.###########.#.#.#####.#########.#.#.#.#.#.#####.#.#######.#.#.###.#####.#.###.#.#.#.#############.#####.#.#.#.###.#######.###.#.#.#.#",
        "#.#...#.............#...#.....###.......#...#...#...#...#.....#...#.#...#.....#.#.#...#.#.#.###.....#...#...#...#.#.#...#...#...#.###.#...#.#",
        "#.#.#.###################.#######.#################.#.#######.#.###.###.#####.#.#.#.###.#.#.###.###.#.#.###.#.###.#.###.###.#.#.#.###.#####.#",
        "#.#.#.#.....#...#...#...#.#.....#...............#...#.......#.#...#...#.###...#...#...#.#...###...#...#.....#.....#.#...#...#.#.#.....#.....#",
        "#.#.#.#.###.#.#.#.#.#.#.#.#.###.###############.#.#########.#.###.###.#.###.#########.#.#########.#################.#.###.###.#.#######.#####",
        "#.#.#.#.#...#.#.#.#.#.#...#...#.###...#.........#.........#.#.#...###.#...#...#.......#.#########.................#...###.#...#.#.....#...###",
        "#.#.#.#.#.###.#.#.#.#.#######.#.###.#.#.#################.#.#.#.#####.###.###.#.#######.#########################.#######.#.###.#.###.###.###",
        "#.#.#.#.#.#...#...#...###.....#.....#...#.....#...#.....#.#.#.#.#...#...#...#.#...#...#.###...#...#...#.....#...#.....#...#...#.#...#...#...#",
        "#.#.#.#.#.#.#############.###############.###.#.#.#.###.#.#.#.#.#.#.###.###.#.###.#.#.#.###.#.#.#.#.#.#.###.#.#.#####.#.#####.#.###.###.###.#",
        "#...#...#...#...#.........#...#.....#...#.#...#.#.#...#.#.#.#.#.#.#.###.#...#.#...#.#.#.###.#.#.#.#.#.#...#...#.......#.......#.....###.#...#",
        "#############.#.#.#########.#.#.###.#.#.#.#.###.#.###.#.#.#.#.#.#.#.###.#.###.#.###.#.#.###.#.#.#.#.#.###.#############################.#.###",
        "#...#...#.....#...#.......#.#.#...#.#.#.#.#.#...#.#...#.#.#.#.#.#.#.#...#.#...#.#...#.#.###.#.#.#.#.#...#...........................#...#...#",
        "#.#.#.#.#.#########.#####.#.#.###.#.#.#.#.#.#.###.#.###.#.#.#.#.#.#.#.###.#.###.#.###.#.###.#.#.#.#.###.###########################.#.#####.#",
        "#.#...#.#...........#.....#.#.#...#.#.#...#.#...#.#...#.#.#.#.#.#.#...#...#.###.#.#...#.###.#.#.#.#...#.#...........................#...#...#",
        "#.#####.#############.#####.#.#.###.#.#####.###.#.###.#.#.#.#.#.#.#####.###.###.#.#.###.###.#.#.#.###.#.#.#############################.#.###",
        "#.....#...#...###...#.#.....#.#.###.#...###.....#.#...#.#.#.#.#.#...###...#...#.#.#.#...#S#.#.#.#...#.#.#.........................#.....#...#",
        "#####.###.#.#.###.#.#.#.#####.#.###.###.#########.#.###.#.#.#.#.###.#####.###.#.#.#.#.###.#.#.#.###.#.#.#########################.#.#######.#",
        "#...#...#.#.#.#...#...#...#...#.#...#...#.........#...#.#.#.#.#...#.#.....#...#...#.#.###.#.#...###.#.#...#.....#.................#.....#...#",
        "#.#.###.#.#.#.#.#########.#.###.#.###.###.###########.#.#.#.#.###.#.#.#####.#######.#.###.#.#######.#.###.#.###.#.#####################.#.###",
        "#.#.....#...#...#.....#...#...#.#.#...#...#...#...#...#.#.#.#.#...#.#.#...#.....#...#...#.#.###.....#.#...#...#.#.......###.........#...#...#",
        "#.###############.###.#.#####.#.#.#.###.###.#.#.#.#.###.#.#.#.#.###.#.#.#.#####.#.#####.#.#.###.#####.#.#####.#.#######.###.#######.#.#####.#",
        "#.#...#...#...#...#...#.....#.#.#.#.###.#...#...#.#...#.#.#...#.....#...#.#...#.#...#...#...#...#.....#.#.....#...#...#.....#.......#.......#",
        "#.#.#.#.#.#.#.#.###.#######.#.#.#.#.###.#.#######.###.#.#.###############.#.#.#.###.#.#######.###.#####.#.#######.#.#.#######.###############",
        "#.#.#...#.#.#.#...#...#...#.#...#...#...#...#.....#...#...###.............#.#.#.#...#.....#...#...#.....#.......#.#.#.#.....#.###...#...#...#",
        "#.#.#####.#.#.###.###.#.#.#.#########.#####.#.#####.#########.#############.#.#.#.#######.#.###.###.###########.#.#.#.#.###.#.###.#.#.#.#.#.#",
        "#...#.....#.#.#...###...#.#.....###...#...#.#.#...#.........#.#...#.....#...#.#.#.#...#...#...#...#...#.....#...#...#.#.#...#...#.#.#.#.#.#.#",
        "#####.#####.#.#.#########.#####.###.###.#.#.#.#.#.#########.#.#.#.#.###.#.###.#.#.#.#.#.#####.###.###.#.###.#.#######.#.#.#####.#.#.#.#.#.#.#",
        "#...#.....#.#...#.........#...#...#...#.#.#.#.#.#...#...#...#.#.#...###.#...#.#.#.#.#...#...#.#...#...#.###.#.......#.#.#...#...#.#.#.#...#.#",
        "#.#.#####.#.#####.#########.#.###.###.#.#.#.#.#.###.#.#.#.###.#.#######.###.#.#.#.#.#####.#.#.#.###.###.###.#######.#.#.###.#.###.#.#.#####.#",
        "#.#.......#...###...#.....#.#...#...#.#.#.#.#.#.#...#.#...###...#...#...#...#...#.#.....#.#.#.#...#.#...#...#.......#...###.#.....#...#.....#",
        "#.###########.#####.#.###.#.###.###.#.#.#.#.#.#.#.###.###########.#.#.###.#######.#####.#.#.#.###.#.#.###.###.#############.###########.#####",
        "#.#...#.....#.....#...###.#...#...#.#.#.#...#...#.#...#...........#...#...#...###.....#.#.#.#.#...#...###...#...#.........#.#.....#...#.#...#",
        "#.#.#.#.###.#####.#######.###.###.#.#.#.#########.#.###.###############.###.#.#######.#.#.#.#.#.###########.###.#.#######.#.#.###.#.#.#.#.#.#",
        "#...#.#...#.#...#...#.....#...#...#.#.#.#.........#.#...#.....#.......#.....#.......#...#.#...#.###...#...#...#...#...#...#.#...#.#.#.#...#.#",
        "#####.###.#.#.#.###.#.#####.###.###.#.#.#.#########.#.###.###.#.#####.#############.#####.#####.###.#.#.#.###.#####.#.#.###.###.#.#.#.#####.#",
        "#.....#...#.#.#.#...#.#...#.###.....#...#.#.......#.#.#...#...#.#.....#.....#.......###...#...#.....#...#...#...#...#.#...#...#.#.#.#.#...#.#",
        "#.#####.###.#.#.#.###.#.#.#.#############.#.#####.#.#.#.###.###.#.#####.###.#.#########.###.#.#############.###.#.###.###.###.#.#.#.#.#.#.#.#",
        "#.....#...#.#.#.#...#...#.#...........#...#.#...#...#.#.#...#...#...#...###...###...#...#...#.#.............#...#.###.#...#...#.#.#.#.#.#.#.#",
        "#####.###.#.#.#.###.#####.###########.#.###.#.#.#####.#.#.###.#####.#.###########.#.#.###.###.#.#############.###.###.#.###.###.#.#.#.#.#.#.#",
        "#.....#...#...#...#.#.....#.......#...#...#.#.#.......#.#...#.#.....#.###.....#...#...#...#...#.............#...#...#.#...#...#.#...#.#.#...#",
        "#.#####.#########.#.#.#####.#####.#.#####.#.#.#########.###.#.#.#####.###.###.#.#######.###.###############.###.###.#.###.###.#.#####.#.#####",
        "#...#...#####...#...#.....#.....#...#...#...#...#.....#...#...#.#...#...#.#...#.....#...###...#...#.....#...###...#.#.#...#...#.###...#...###",
        "###.#.#######.#.#########.#####.#####.#.#######.#.###.###.#####.#.#.###.#.#.#######.#.#######.#.#.#.###.#.#######.#.#.#.###.###.###.#####.###",
        "#...#.....#...#...........#...#.......#.#.......#.#...#...#.....#.#...#...#.....#...#.....#...#.#.#...#.#...#.....#.#.#.#...#...#...#...#...#",
        "#.#######.#.###############.#.#########.#.#######.#.###.###.#####.###.#########.#.#######.#.###.#.###.#.###.#.#####.#.#.#.###.###.###.#.###.#",
        "#.........#.................#...........#.........#.....###.......###...........#.........#.....#.....#.....#.......#...#.....###.....#.....#",
        "#############################################################################################################################################",
    ]
)
# part1(maze)
# print(part2(maze))
